import streamlit as st
import requests
import pandas as pd
import numpy as np
from typing import Dict, Any
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="RealEstatePredictor | –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
    page_icon="üè†",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 3rem !important;
        color: #1f77b4 !important;
        text-align: center;

    }
    .sub-header {
        font-size: 1.2rem !important;
        color: #666 !important;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 15px;
        color: white;
        text-align: center;
    }
    .parameter-card {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #1f77b4;
        margin-bottom: 1rem;
    }
    .input-section {
        background-color: #f0f2f6;
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
    }
    .stButton>button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        font-weight: bold;
        border: none;
        padding: 1rem;
        border-radius: 10px;
        font-size: 1.1rem;
    }
    .stButton>button:hover {
        background: linear-gradient(135deg, #5a67d8 0%, #6b46c1 100%);
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.markdown("""
<div class="main-header">
    üè† RealEstatePredictor
</div>
<div class="sub-header">
    –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
</div>
""", unsafe_allow_html=True)

# URL API
API_URL = "http://localhost:8000"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –æ—Ç API
def get_predictions(data: Dict[str, Any]) -> Dict[str, Any]:
    
        response = requests.post(f"{API_URL}/predict", json=data, timeout=30)
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": f"–û—à–∏–±–∫–∞ API: {response.status_code}"}


# –°–µ–∫—Ü–∏—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
st.markdown("### –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤–≤–æ–¥–∞
col1, col2, col3 = st.columns(3)

with col1:
    st.markdown("#### üè¢ –û—Å–Ω–æ–≤–Ω–æ–µ")
    size = st.number_input("**–ü–ª–æ—â–∞–¥—å (–º¬≤)**", min_value=10, max_value=1000, value=80, step=5,
                           help="–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
    room_count = st.selectbox("**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç**", [1, 2, 3, 4, 5, 6], index=1,
                              help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–ª—ã—Ö –∫–æ–º–Ω–∞—Ç")
    building_age = st.slider("**–í–æ–∑—Ä–∞—Å—Ç –∑–¥–∞–Ω–∏—è (–ª–µ—Ç)**", 0, 50, 5,
                                     help="–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –∑–¥–∞–Ω–∏—é")

with col2:
    st.markdown("#### üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
    floor_no = st.number_input("**–≠—Ç–∞–∂**", min_value=-2, max_value=50, value=3, step=1,
                               help="–ù–∞ –∫–∞–∫–æ–º —ç—Ç–∞–∂–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –æ–±—ä–µ–∫—Ç")
    total_floor_count = st.number_input("**–≠—Ç–∞–∂–Ω–æ—Å—Ç—å –∑–¥–∞–Ω–∏—è**", min_value=1, max_value=50, value=5, step=1,
                                        help="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –≤ –∑–¥–∞–Ω–∏–∏")
    tom = st.slider("**–î–Ω–µ–π –Ω–∞ —Ä—ã–Ω–∫–µ**", 0, 365, 30,
                               help="–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ–±—ä–µ–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ–¥–∞–∂–µ")

with col3:
    st.markdown("#### ‚öôÔ∏è –î–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    heating_type = st.selectbox(
        "**–¢–∏–ø –æ—Ç–æ–ø–ª–µ–Ω–∏—è**",
        options=[
            ("–ù–µ—Ç", 0),
            ("–ü–µ—á—å (–£–≥–æ–ª—å)", 1),
            ("–ü–µ—á—å (–ì–∞–∑)", 2),
            ("–ö–æ—Ç–µ–ª (–£–≥–æ–ª—å)", 3),
            ("–ö–æ—Ç–µ–ª (–ì–∞–∑)", 4),
            ("–ö–æ—Ç–µ–ª (–ñ–∏–¥–∫–æ–µ —Ç–æ–ø–ª–∏–≤–æ)", 5),
            ("–ì–∞–∑–æ–≤—ã–π –∫–æ—Ç–µ–ª (–Ω–∞—Å—Ç–µ–Ω–Ω—ã–π)", 6),
            ("–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π –∫–æ—Ç–µ–ª", 7),
            ("–ü–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ", 8),
            ("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", 9),
            ("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (—Å—á–µ—Ç—á–∏–∫ —Ç–µ–ø–ª–∞)", 10),
            ("–¢–µ–ø–ª—ã–π –ø–æ–ª", 11),
            ("–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä/–û–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å", 12),
            ("–§–∞–Ω–∫–æ–π–ª", 13),
            ("–°–æ–ª–Ω–µ—á–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è", 14),
            ("–ì–µ–æ—Ç–µ—Ä–º–∞–ª—å–Ω–∞—è", 15)
        ],
        format_func=lambda x: x[0],
        index=9,
        help="–¢–∏–ø —Å–∏—Å—Ç–µ–º—ã –æ—Ç–æ–ø–ª–µ–Ω–∏—è –≤ –∑–¥–∞–Ω–∏–∏"
    )[1]

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ —Ü–µ–Ω—Ç—Ä—É
col1, col2, col3 = st.columns([1, 2, 1])
with col2:
    predict_button = st.button("–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", use_container_width=True)

if predict_button:
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    input_data = {
        "total_floor_count": total_floor_count,
        "floor_no": floor_no,
        "room_count": room_count,
        "size": size,
        "building_age": building_age,
        "tom": tom,
        "heating_type": heating_type,
        "listing_type": 1,
        'price': 0,
        "address_encoded": 0,
    }

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    st.markdown("### –í–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    params_container = st.container()

    with params_container:
        param_cols = st.columns(3)

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–æ–≤ –æ—Ç–æ–ø–ª–µ–Ω–∏—è —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        heating_types = {
            0: "–ù–µ—Ç",
            1: "–ü–µ—á—å (–£–≥–æ–ª—å)",
            2: "–ü–µ—á—å (–ì–∞–∑)",
            3: "–ö–æ—Ç–µ–ª (–£–≥–æ–ª—å)",
            4: "–ö–æ—Ç–µ–ª (–ì–∞–∑)",
            5: "–ö–æ—Ç–µ–ª (–ñ–∏–¥–∫–æ–µ —Ç–æ–ø–ª–∏–≤–æ)",
            6: "–ì–∞–∑–æ–≤—ã–π –∫–æ—Ç–µ–ª (–Ω–∞—Å—Ç–µ–Ω–Ω—ã–π)",
            7: "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π –∫–æ—Ç–µ–ª",
            8: "–ü–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ",
            9: "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
            10: "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (—Å—á–µ—Ç—á–∏–∫ —Ç–µ–ø–ª–∞)",
            11: "–¢–µ–ø–ª—ã–π –ø–æ–ª",
            12: "–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä/–û–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å",
            13: "–§–∞–Ω–∫–æ–π–ª",
            14: "–°–æ–ª–Ω–µ—á–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è",
            15: "–ì–µ–æ—Ç–µ—Ä–º–∞–ª—å–Ω–∞—è"
        }

        params = [
            ("–ü–ª–æ—â–∞–¥—å", f"{size} –º¬≤"),
            ("–ö–æ–º–Ω–∞—Ç—ã", room_count),
            ("–≠—Ç–∞–∂", f"{floor_no}/{total_floor_count}"),
            ("–í–æ–∑—Ä–∞—Å—Ç –∑–¥–∞–Ω–∏—è", f"{building_age} –ª–µ—Ç"),
            ("–î–Ω–µ–π –Ω–∞ —Ä—ã–Ω–∫–µ", tom),
            ("–¢–∏–ø –æ—Ç–æ–ø–ª–µ–Ω–∏—è", heating_types.get(heating_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
        ]

        for i, (param_name, param_value) in enumerate(params):
            with param_cols[i % 3]:
                st.markdown(f"**{param_name}:** {param_value}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
    with st.spinner("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é ML –º–æ–¥–µ–ª–µ–π..."):
        predictions = get_predictions(input_data)
        print("–ü–†–ï–î:   ", predictions)

    if predictions:
        if "error" in predictions:
            st.error(f"‚ùå {predictions['error']}")
        else:
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            st.markdown("---")
            st.markdown("### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

            # –ú–µ—Ç—Ä–∏–∫–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
            col1, col2 = st.columns(2)

            with col1:
                price = predictions.get("predicted_price", 0)
                st.markdown(f"""
                <div class="metric-card">
                    <h3>üí∞ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞</h3>
                    <h2>{price:,.0f} ‚Ç∫</h2>
                </div>
                """, unsafe_allow_html=True)

            with col2:
                subtype = predictions.get("predicted_subtype", -1)
                subtype_mapping = {
                    0: "–ö–≤–∞—Ä—Ç–∏—Ä–∞", 1: "–ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å", 2: "–í–∏–ª–ª–∞",
                    3: "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –¥–æ–º", 4: "–ö–æ–æ–ø–µ—Ä–∞—Ç–∏–≤", 5: "–ö–æ–º–ø–ª–µ–∫—Å –∑–¥–∞–Ω–∏–π",
                    6: "–î–∞—á–∞", 7: "–°–±–æ—Ä–Ω—ã–π –¥–æ–º", 8: "–û—Å–æ–±–Ω—è–∫/–î–≤–æ—Ä–µ—Ü",
                    9: "–§–µ—Ä–º–µ—Ä—Å–∫–∏–π –¥–æ–º", 10: "–í–æ–¥–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞", 11: "–õ–æ—Ñ—Ç"
                }
                subtype_name = subtype_mapping.get(subtype, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                st.markdown(f"""
                <div class="metric-card" 
                style="background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);">
                    <h3>üè∑ –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</h3>
                    <h4>{subtype}</h4>
                </div>
                """, unsafe_allow_html=True)

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            st.markdown("---")
            st.markdown("### –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

            # –ì—Ä–∞—Ñ–∏–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            fig = make_subplots(rows=1, cols=2, specs=[[{'type': 'bar'}, {'type': 'pie'}]])

            # Bar chart
            param_names = ['–ü–ª–æ—â–∞–¥—å', '–ö–æ–º–Ω–∞—Ç—ã', '–≠—Ç–∞–∂', '–í–æ–∑—Ä–∞—Å—Ç']
            param_values = [size, room_count, floor_no, building_age]

            fig.add_trace(
                go.Bar(x=param_names, y=param_values, name="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", marker_color='#1f77b4'),
                row=1, col=1
            )

            # Pie chart –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            pie_labels = ['–ü–ª–æ—â–∞–¥—å', '–ö–æ–º–Ω–∞—Ç—ã', '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–í–æ–∑—Ä–∞—Å—Ç']
            pie_values = [40, 25, 20, 15]

            fig.add_trace(
                go.Pie(labels=pie_labels, values=pie_values, name=""),
                row=1, col=2
            )

            fig.update_layout(height=400, showlegend=False, title_text="–ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–∞")
            st.plotly_chart(fig, use_container_width=True)

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            with st.expander("–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥–Ω–æ–∑–µ"):
                col1, col2 = st.columns(2)
                with col1:
                    st.write("**–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**")
                    st.json(input_data)
                with col2:
                    st.write("**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏:**")
                    st.json({k: v for k, v in predictions.items() if
                             k not in ['regressor_features_count', 'classifier_features_count']})

else:
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –∫–æ–≥–¥–∞ –∫–Ω–æ–ø–∫–∞ –µ—â–µ –Ω–µ –Ω–∞–∂–∞—Ç–∞
    st.markdown("---")
    col1, col2 = st.columns([2, 1])
